public class KthElement2SortedArray {

    /**
     * https://www.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array1317/1?page=3&sprint=94ade6723438d94ecf0c00c3937dad55&sprint=94ade6723438d94ecf0c00c3937dad55&sortBy=submissions
     *
     * Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K.
     * The task is to find the element that would be at the kth position of the final sorted array.
     *
     * Input:
     * arr1[] = {2, 3, 6, 7, 9}
     * arr2[] = {1, 4, 8, 10}
     * k = 5
     * Output:
     * 6
     * Explanation:
     * The final sorted array would be -
     * 1, 2, 3, 4, 6, 7, 8, 9, 10
     * The 5th element of this array is 6.
     */
    public static long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        int l1 = 1, r1 = n;
        int mid1 = 0, mid2=0;

        // do binary search on arr1
        while(l1<=r1) {
            mid1 = (l1+r1)/2;
            mid2 = k- mid1;

            if (mid2 < 0) {
                r1 = mid1 -1;
            } else {
                if ((mid1 <n && (mid2 <= m && mid2 >0))  && arr1[mid1] < arr2[mid2-1] || mid2 > m)
                    l1 = mid1 +1;
                else if ((mid1 <=n && (mid2 < m && mid2 >= 0)) && arr1[mid1-1] > arr2[mid2] || mid1 + mid2 >k)
                    r1 = mid1 -1;
                else
                    break;
            }
        }


        if (r1 == 0) {
            mid1 = 0;
        } else if (l1 == n) {
            mid1 = n;
        }
        mid2 = k-mid1;


        if (mid1-1 < 0) {
            return arr2[mid2-1];
        } else if (mid2-1<0) {
            return arr1[mid1-1];
        } else {
            return Math.max(arr1[mid1-1], arr2[mid2-1]);
        }
    }


    public static void main(String[] args) {
//         int[] arr1 = {5, 5, 8, 8, 8, 9, 11, 11, 11, 11, 11};
//         int [] arr2 = {4, 4, 4, 4, 6, 8, 9, 9, 9, 11, 13};
//         int k = 2;

//        int[] arr1 = {2, 3, 6, 7, 9};
//        int[] arr2 = {1, 4, 8, 10};
//        int k = 5;


//        int[] arr1 = {4, 5, 6, 12};
//        int[] arr2 = {4, 5, 6, 8, 8,};
//        int k = 2;

        int[] arr1 = {8, 10, 10, 11, 12, 13, 13, 13};
        int[] arr2 = {5, 6, 8, 10, 13};
        int k =4;

//        int[] arr1 = {40, 41, 41, 45, 51, 53, 61, 63, 64, 67, 67, 73, 73, 76, 78, 79, 81, 86, 88, 89, 93, 97, 99, 104, 112, 116, 116, 117, 118, 118, 120, 129, 130, 133, 133, 134, 135, 135, 141, 142, 142, 143, 146, 150, 151, 151, 152, 152, 154, 156, 168, 169, 176, 178, 179, 179, 180, 182, 185, 186, 186, 189, 190, 192, 195, 200, 201, 202, 206, 207, 209, 209, 215, 215, 216, 218, 219, 221, 225, 226, 231, 231, 234, 235, 238, 238, 239, 240, 240, 244, 248, 250, 258, 259, 262, 262, 262, 265, 267, 276, 279, 279, 280, 284, 286, 291, 292, 293, 293, 293, 295, 296, 299, 302, 305, 309, 309, 311, 312, 316, 320, 321, 324, 324, 328, 331, 333, 335, 336, 337, 338, 341, 345, 346, 347, 349, 350, 357, 357, 358, 359, 360, 363, 365, 368, 369, 371, 371, 373, 380, 381, 383, 384, 390, 391, 396, 398, 401, 409, 411, 412, 414, 415, 415, 419, 419, 420, 421, 424, 424, 430, 433, 434, 438, 440, 443, 444, 445, 448, 450, 459, 461, 461, 463, 464, 464, 467, 472, 473, 477, 478, 480, 483, 484, 485, 487, 489, 491, 499, 500, 501, 502, 510, 511, 514, 515, 517, 522, 523, 526, 527, 528, 530, 531, 532, 535, 539, 544, 544, 547, 547, 548, 549, 553, 554, 556, 557, 560, 561, 564, 564, 570, 570, 571, 572, 575, 577, 578, 580, 580, 585, 592, 594, 603, 607, 613, 615, 618, 618, 619, 621, 622, 623, 624, 629, 630, 631, 632, 632, 639, 642, 644, 644, 646, 649, 651, 655, 657, 662, 668, 668, 669, 669, 670, 671, 671, 671, 671, 673, 675, 677, 678, 679, 680, 686, 686, 688, 688, 688, 690, 690, 691, 696, 699, 699, 702, 709, 711, 713, 719, 721, 725, 727, 728, 732, 732, 736, 737, 737, 741, 744, 747, 750, 753, 755, 756, 757, 760, 761, 761, 761, 763, 763, 764, 766, 767, 769, 772, 778, 778, 779, 780, 784, 786, 790, 795, 799, 801, 801, 803, 809, 813, 813, 815, 815, 818, 830, 831, 837, 841, 846, 850, 857, 857, 858, 861, 862, 863, 863, 867, 867, 868, 869, 872, 874, 876, 878, 882, 884, 890, 892, 893, 893, 896, 897, 902, 902, 904, 906, 906, 908, 910, 910, 911, 915, 918, 919, 920, 922, 923, 924, 925, 926, 929, 930, 932, 934, 935, 935, 936, 936, 936, 943, 944, 945, 947, 949, 950, 953, 956, 956, 962, 964, 965, 967, 969, 973, 975, 990, 991, 991, 991, 993, 993, 993, 995, 998, 1001, 1001, 1002, 1003, 1003, 1009, 1009, 1013, 1015, 1018, 1019, 1024, 1025, 1025, 1026, 1028, 1031, 1034, 1035, 1035};
//        int[] arr2 = {42, 45, 50, 54, 57, 60, 61, 64, 65, 67, 69, 71, 72, 73, 74, 76, 76, 84, 88, 90, 92, 98, 98, 100, 102, 102, 107, 110, 111, 111, 111, 112, 116, 118, 118, 121, 123, 123, 126, 132, 134, 136, 138, 138, 138, 139, 140, 141, 146, 149, 150, 155, 156, 157, 161, 162, 165, 165, 167, 169, 170, 173, 175, 176, 182, 183, 185, 186, 188, 194, 195, 197, 200, 200, 201, 202, 203, 205, 207, 207, 208, 208, 209, 209, 211, 212, 214, 215, 216, 217, 218, 220, 222, 226, 230, 240, 241, 244, 245, 247, 247, 247, 247, 254, 255, 255, 256, 259, 259, 259, 265, 270, 270, 283, 283, 283, 283, 284, 285, 287, 289, 293, 295, 296, 297, 297, 300, 303, 306, 307, 309, 312, 312, 320, 321, 324, 326, 331, 332, 332, 333, 337, 342, 344, 345, 345, 347, 348, 351, 352, 355, 358, 359, 362, 363, 365, 366, 370, 371, 373, 374, 375, 386, 386, 386, 387, 389, 391, 392, 393, 394, 396, 397, 401, 406, 412, 413, 416, 417, 418, 419, 421, 421, 423, 423, 424, 425, 426, 439, 441, 443, 443, 445, 446, 447, 448, 448, 449, 453, 454, 459, 461, 466, 467, 469, 470, 473, 473, 474, 475, 476, 476, 480, 480, 481, 481, 483, 485, 486, 487, 491, 492, 496, 498, 500, 501, 502, 505, 506, 510, 510, 516, 517, 518, 529, 535, 535, 536, 541, 544, 545, 549, 550, 552, 556, 556, 557, 560, 561, 563, 564, 566, 570, 572, 576, 577, 580, 581, 585, 585, 587, 593, 593, 593, 596, 600, 600, 604, 609, 609, 610, 613, 614, 618, 620, 622, 622, 623, 623, 623, 625, 630, 630, 635, 637, 640, 642, 644, 644, 647, 648, 649, 660, 664, 664, 664, 665, 666, 667, 668, 671, 677, 677, 678, 678, 681, 682, 683, 683, 683, 688, 693, 700, 701, 704, 706, 707, 709, 709, 709, 716, 727, 731, 738, 738, 738, 743, 743, 746, 746, 748, 753, 756, 757, 757, 764, 768, 768, 769, 769, 773, 774, 776, 777, 778, 778, 784, 784, 786, 786, 789, 789, 791, 793, 793, 796, 798, 798, 801, 803, 803, 804, 809, 811, 811, 814, 817, 817, 818, 819, 821, 823, 824, 825, 827, 827, 827, 828, 828, 830, 831, 832, 835, 835, 836, 837, 837, 842, 843, 846, 847, 847, 848, 849, 852, 852, 859, 860, 868, 868, 871, 874, 874, 874, 878, 878, 885, 886, 889, 891, 893, 893, 895, 896, 897, 897, 899, 899, 901, 902, 904, 906, 907, 907, 913, 916, 918, 918, 920, 922, 923, 924, 925, 927, 928, 929, 933, 935, 938, 940, 943, 944, 944, 945, 947, 948, 950, 951, 952, 955, 956, 957, 957, 958, 965, 968, 971, 978, 981, 981, 983, 986, 987, 987, 992, 997, 997, 999, 1001, 1005, 1014, 1015, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038};
//        int k =3;
        System.out.println(kthElement(arr1, arr2, arr1.length, arr2.length, k));

    }
}
